/*! 
 * fancyBox 2.0.1
 * Copyright 2011, Janis Skarnelis (www.fancyapps.com)
 * License: www.fancyapps.com/fancybox/#license
 *	
 */
(function (f, d, g) { var c = g(f), h = g(d), e = g.fancybox = function () { e.open.apply(this, arguments) }, b = false, a = null; g.extend(e, { version: "2.0.1", defaults: { padding: 15, margin: 20, width: 800, height: 600, minWidth: 200, minHeight: 200, maxWidth: 9999, maxHeight: 9999, autoSize: true, fitToView: true, aspectRatio: false, topRatio: 0.5, fixed: !g.browser.msie || g.browser.version > 6, scrolling: "auto", wrapCSS: "fancybox-default", arrows: true, closeBtn: true, closeClick: true, mouseWheel: true, autoPlay: false, playSpeed: 3000, loop: true, ajax: {}, keys: { next: [13, 32, 34, 39, 40], prev: [8, 33, 37, 38], close: [27] }, index: 0, type: null, href: null, content: null, title: null, tpl: { wrap: '<div class="fancybox-wrap"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div>', image: '<img class="fancybox-image" src="{href}" alt="" />', iframe: '<iframe class="fancybox-iframe" name="fancybox-frame{rnd}" frameborder="0" hspace="0" ' + (g.browser.msie ? 'allowtransparency="true""' : "") + ' scrolling="{scrolling}" src="{href}"></iframe>', swf: '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="wmode" value="transparent" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="{href}" /><embed src="{href}" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="100%" height="100%" wmode="transparent"></embed></object>', error: '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>', closeBtn: '<div title="Close" class="fancybox-item fancybox-close"></div>', next: '<a title="Next" class="fancybox-item fancybox-next"><span></span></a>', prev: '<a title="Previous" class="fancybox-item fancybox-prev"><span></span></a>' }, openEffect: "fade", openSpeed: 500, openEasing: "swing", openOpacity: true, openMethod: "zoomIn", closeEffect: "fade", closeSpeed: 500, closeEasing: "swing", closeOpacity: true, closeMethod: "zoomOut", nextEffect: "elastic", nextSpeed: 300, nextEasing: "swing", nextMethod: "changeIn", prevEffect: "elastic", prevSpeed: 300, prevEasing: "swing", prevMethod: "changeOut", helpers: { overlay: { speedIn: 0, speedOut: 0, opacity: 0.85, css: { cursor: "pointer", "background-color": "rgba(0, 0, 0, 0.85)" }, closeClick: true }, title: { type: "float" } }, onCancel: g.noop, beforeLoad: g.noop, afterLoad: g.noop, beforeShow: g.noop, afterShow: g.noop, beforeClose: g.noop, afterClose: g.noop }, group: {}, opts: {}, coming: null, current: null, isOpen: false, isOpened: false, wrap: null, outer: null, inner: null, player: { timer: null, isActive: false }, ajaxLoad: null, imgPreload: null, transitions: {}, helpers: {}, open: function (j, i) { if (!g.isArray(j)) { j = [j] } if (!j.length) { return } e.close(true); e.opts = g.extend(true, {}, e.defaults, i); e.group = j; e._start(e.opts.index || 0) }, cancel: function () { if (e.coming && false === e.trigger("onCancel")) { return } e.coming = null; e.hideLoading(); if (e.ajaxLoad) { e.ajaxLoad.abort() } e.ajaxLoad = null; if (e.imgPreload) { e.imgPreload.onload = e.imgPreload.onabort = e.imgPreload.onerror = null } }, close: function (i) { e.cancel(); if (!e.current || false === e.trigger("beforeClose")) { return } if (!e.isOpen || (i && i[0] === true)) { g(".fancybox-wrap").stop().trigger("onReset").remove(); e._afterZoomOut() } else { e.isOpen = e.isOpened = false; g(".fancybox-item").remove(); e.wrap.stop(true).removeClass("fancybox-opened"); e.inner.css("overflow", "hidden"); e.transitions[e.current.closeMethod]() } }, play: function (j) { var i = function () { clearTimeout(e.player.timer) }, m = function () { i(); if (e.current && e.player.isActive) { e.player.timer = setTimeout(e.next, e.current.playSpeed) } }, k = function () { i(); h.unbind(".player"); e.player.isActive = false; e.trigger("onPlayEnd") }, l = function () { if (e.current && (e.current.loop || e.current.index < e.group.length - 1)) { e.player.isActive = true; m(); h.bind({ "onCancel.player onComplete.player onUpdate.player": m, "onClose.player": k, "onStart.player": i }); e.trigger("onPlayStart") } }; if (e.player.isActive || (j && j[0] === false)) { k() } else { l() } }, next: function () { e.current && e.jumpto(e.current.index + 1) }, prev: function () { e.current && e.jumpto(e.current.index - 1) }, jumpto: function (i) { if (!e.current) { return } i = parseInt(i, 10); if (e.group.length > 1 && e.current.loop) { if (i >= e.group.length) { i = 0 } else { if (i < 0) { i = e.group.length - 1 } } } if (typeof e.group[i] !== "undefined") { e.cancel(); e._start(i) } }, reposition: function (i) { if (e.isOpen) { e.wrap.css(e._getPosition(i)) } }, update: function () { if (e.isOpen) { if (!b) { a = setInterval(function () { if (b) { b = false; clearTimeout(a); if (e.current) { if (e.current.autoSize) { e.inner.height("auto"); e.current.height = e.inner.height() } e._setDimension(); if (e.current.canGrow) { e.inner.height("auto") } e.reposition(); e.trigger("onUpdate") } } }, 100) } b = true } }, toggle: function () { if (e.isOpen) { e.current.fitToView = !e.current.fitToView; e.update() } }, hideLoading: function () { g("#fancybox-loading").remove() }, showLoading: function () { e.hideLoading(); g('<div id="fancybox-loading"></div>').click(e.cancel).appendTo("body") }, getViewport: function () { return { x: c.scrollLeft(), y: c.scrollTop(), w: c.width(), h: c.height() } }, unbindEvents: function () { h.unbind(".fb"); c.unbind(".fb") }, bindEvents: function () { var j = e.current, i = j.keys; if (!j) { return } c.bind("resize.fb, orientationchange.fb", e.update); if (i) { h.bind("keydown.fb", function (k) { if (g.inArray(k.target.tagName.toLowerCase(), ["input", "textarea", "select", "button"]) > -1) { return } if (g.inArray(k.keyCode, i.close) > -1) { e.close(); k.preventDefault() } else { if (g.inArray(k.keyCode, i.next) > -1) { e.next(); k.preventDefault() } else { if (g.inArray(k.keyCode, i.prev) > -1) { e.prev(); k.preventDefault() } } } }) } if (g.fn.mousewheel && j.mouseWheel && e.group.length > 1) { e.wrap.bind("mousewheel.fb", function (k, l) { if (g(k.target).get(0).clientHeight === 0 || g(k.target).get(0).scrollHeight === g(k.target).get(0).clientHeight) { k.preventDefault(); e[l > 0 ? "prev" : "next"]() } }) } }, trigger: function (j) { var i, k = g.inArray(j, ["onCancel", "beforeLoad", "afterLoad"]) > -1 ? "coming" : "current"; if (!e[k]) { return } if (g.isFunction(e[k][j])) { i = e[k][j].apply(e[k], Array.prototype.slice.call(arguments, 1)) } if (i === false) { return false } if (e[k].helpers) { g.each(e[k].helpers, function (m, l) { if (l && typeof e.helpers[m] !== "undefined" && g.isFunction(e.helpers[m][j])) { e.helpers[m][j](l) } }) } g.event.trigger(j + ".fb") }, isImage: function (i) { return i && i.match(/\.(jpg|gif|png|bmp|jpeg)(.*)?$/i) }, isSWF: function (i) { return i && i.match(/\.(swf)(.*)?$/i) }, _start: function (j) { var l = e.group[j] || null, k, i, m, n; coming = g.extend(true, {}, e.opts, (g.isPlainObject(l) ? l : {}), { index: j, element: l }); if (typeof coming.margin === "number") { coming.margin = [coming.margin, coming.margin, coming.margin, coming.margin] } e.coming = coming; if (false === e.trigger("beforeLoad")) { e.coming = null; return } if (coming.content) { l = coming.content; m = "html" } if (typeof l == "object" && (l.nodeType || l instanceof g)) { k = true; coming.href = g(l).attr("href") || coming.href; coming.title = g(l).attr("title") || coming.title } m = coming.type; i = coming.href; l = coming.element; if (!m) { if (i) { if (k) { n = g(l).data("fancybox-type"); if (!n && l.className) { n = l.className.match(/fancybox\.(\w+)/); n = n ? n[1] : false } } if (n) { m = n } else { if (e.isImage(i)) { m = "image" } else { if (e.isSWF(i)) { m = "swf" } else { if (i.match(/^#/)) { m = "inline" } else { coming.content = i } } } } } if (!m) { m = k ? "inline" : "html" } coming.type = m } if (!coming.content) { coming.content = m === "inline" && i ? g(i) : l } e.coming = coming; if (m === "image") { e._loadImage() } else { if (m === "ajax") { e._loadAjax() } else { if (!m || (m === "inline" && !coming.content.length)) { e._error() } else { e._afterLoad() } } } }, _error: function () { e.coming.type = "html"; e.coming.minHeight = 0; e.coming.autoSize = true; e.coming.content = e.coming.tpl.error; e._afterLoad() }, _loadImage: function () { e.imgPreload = new Image(); e.imgPreload.onload = function () { this.onload = this.onerror = null; e.coming.width = this.width; e.coming.height = this.height; e._afterLoad() }; e.imgPreload.onerror = function () { this.onload = this.onerror = null; e._error() }; e.imgPreload.src = e.coming.href; if (!e.imgPreload.complete) { e.showLoading() } }, _loadAjax: function () { e.showLoading(); e.ajaxLoad = g.ajax(g.extend({}, e.coming.ajax, { url: e.coming.href, error: function (i, k, j) { if (k !== "abort" && i.status > 0) { e.coming.content = j; e._error() } else { e.hideLoading() } }, success: function (j, k, i) { if (k === "success") { e.coming.content = j; e._afterLoad() } } })) }, _afterLoad: function () { e.hideLoading(); if (!e.coming || false === e.trigger("afterLoad", e.current)) { e.coming = false; return } if (e.isOpened) { g(".fancybox-item").remove(); e.wrap.stop(true).removeClass("fancybox-opened"); e.transitions[e.current.prevMethod]() } else { g(".fancybox-wrap").stop().trigger("onReset").remove() } e.isOpen = false; e.current = e.coming; e.coming = false; e.wrap = g(e.current.tpl.wrap).addClass(e.current.wrapCSS).appendTo("body"); e.outer = g(".fancybox-outer", e.wrap).css("padding", e.current.padding + "px"); e.inner = g(".fancybox-inner", e.wrap); e._setContent(); e.unbindEvents(); e.bindEvents(); e.trigger("beforeShow"); e._setDimension(); if (e.isOpened) { e.transitions[e.current.nextMethod]() } else { e.transitions[e.current.openMethod]() } }, _setContent: function () { var j, k, l = e.current, i = l.type; switch (i) { case "inline": case "ajax": case "html": if (i === "inline") { j = l.content.show().detach(); if (j.parent().hasClass("fancybox-inner")) { j.parents(".fancybox-wrap").trigger("onReset").remove() } g(e.wrap).bind("onReset", function () { j.appendTo("body").hide() }) } else { j = l.content } if (l.autoSize) { k = g('<div class="fancybox-tmp"></div>').appendTo(g("body")).append(j); l.width = k.outerWidth(); l.height = k.outerHeight(true); j = k.children().detach(); k.remove() } break; case "image": j = l.tpl.image.replace("{href}", l.href); l.aspectRatio = true; break; case "swf": j = l.tpl.swf.replace(/\{width\}/g, l.width).replace(/\{height\}/g, l.height).replace(/\{href\}/g, l.href); break; case "iframe": j = l.tpl.iframe.replace("{href}", l.href).replace("{scrolling}", l.scrolling).replace("{rnd}", new Date().getTime()); break } if (g.inArray(i, ["image", "swf", "iframe"]) > -1) { l.autoSize = false; l.scrolling = false } e.current = l; e.inner.append(j) }, _setDimension: function () { var n = e.getViewport(), l = e.current.margin, i = e.current.padding * 2, k = e.current.width + i, s = e.current.height + i, o = e.current.width / e.current.height, p = e.current.maxWidth, q = e.current.maxHeight, j = e.current.minWidth, r = e.current.minHeight, m; n.w -= (l[1] + l[3]); n.h -= (l[0] + l[2]); if (k.toString().indexOf("%") > -1) { k = ((n.w * parseFloat(k)) / 100) } if (s.toString().indexOf("%") > -1) { s = ((n.h * parseFloat(s)) / 100) } if (e.current.fitToView) { p = Math.min(n.w, p); q = Math.min(n.h, q) } p = Math.max(j, p); q = Math.max(r, q); if (e.current.aspectRatio) { if (k > p) { k = p; s = ((k - i) / o) + i } if (s > q) { s = q; k = ((s - i) * o) + i } if (k < j) { k = j; s = ((k - i) / o) + i } if (s < r) { s = r; k = ((s - i) * o) + i } } else { k = Math.max(j, Math.min(k, p)); s = Math.max(r, Math.min(s, q)) } k = Math.round(k); s = Math.round(s); g(e.wrap.add(e.outer).add(e.inner)).width("auto").height("auto"); e.inner.width(k - i).height(s - i); e.wrap.width(k); m = e.wrap.height(); if (k > p || m > q) { while ((k > p || m > q) && k > j && m > r) { s = s - 10; if (e.current.aspectRatio) { k = Math.round(((s - i) * o) + i); if (k < j) { k = j; s = ((k - i) / o) + i } } else { k = k - 10 } e.inner.width(k - i).height(s - i); e.wrap.width(k); m = e.wrap.height() } } e.current.dim = { width: k, height: m }; e.current.canGrow = e.current.autoSize && s > r && s < q; e.current.canShrink = false; e.current.canExpand = false; if ((k - i) < e.current.width || (s - i) < e.current.height) { e.current.canExpand = true } else { if ((k > n.w || m > n.h) && k > j && s > r) { e.current.canShrink = true } } }, _getPosition: function (k) { var j = e.getViewport(), m = e.current.margin, l = e.wrap.width() + m[1] + m[3], i = e.wrap.height() + m[0] + m[2], n = { position: "absolute", top: m[0] + j.y, left: m[3] + j.x }; if (e.current.fixed && (!k || k[0] === false) && i <= j.h && l <= j.w) { n = { position: "fixed", top: m[0], left: m[3] } } n.top = Math.ceil(Math.max(n.top, n.top + ((j.h - i) * e.current.topRatio))) + "px"; n.left = Math.ceil(Math.max(n.left, n.left + ((j.w - l) * 0.5))) + "px"; return n }, _afterZoomIn: function () { var i = e.current; e.isOpen = e.isOpened = true; e.wrap.addClass("fancybox-opened").css("overflow", "visible"); e.update(); e.inner.css("overflow", i.scrolling === "auto" ? "auto" : (i.scrolling === "yes" ? "scroll" : "hidden")); if (i.closeClick) { e.inner.bind("click.fb", e.close) } if (i.closeBtn) { g(e.current.tpl.closeBtn).appendTo(e.wrap).bind("click.fb", e.close) } if (i.arrows && e.group.length > 1) { if (i.loop || i.index > 0) { g(i.tpl.prev).appendTo(e.wrap).bind("click.fb", e.prev) } if (i.loop || i.index < e.group.length - 1) { g(i.tpl.next).appendTo(e.wrap).bind("click.fb", e.next) } } e.trigger("afterShow"); if (e.opts.autoPlay && !e.player.isActive) { e.opts.autoPlay = false; e.play() } }, _afterZoomOut: function () { e.unbindEvents(); e.trigger("afterClose"); e.wrap.trigger("onReset").remove(); g.extend(e, { group: {}, opts: {}, current: null, isOpened: false, isOpen: false, wrap: null, outer: null, inner: null }) } }); e.transitions = { getOrigPosition: function () { var k = e.current.element, n = {}, l = 50, j = 50, m, i; if (k && k.nodeName && g(k).is(":visible")) { m = g(k).find("img:first"); if (m.length) { n = m.offset(); l = m.outerWidth(); j = m.outerHeight() } else { n = g(k).offset() } } else { i = e.getViewport(); n.top = i.y + (i.h - j) * 0.5; n.left = i.x + (i.w - l) * 0.5 } n = { top: Math.ceil(n.top) + "px", left: Math.ceil(n.left) + "px", width: Math.ceil(l) + "px", height: Math.ceil(j) + "px" }; return n }, step: function (j, l) { var k, i, m; if (l.prop === "width" || l.prop === "height") { i = m = Math.ceil(j - (e.current.padding * 2)); if (l.prop === "height") { k = (j - l.start) / (l.end - l.start); if (l.start > l.end) { k = 1 - k } i -= e.innerSpace * k; m -= e.outerSpace * k } e.inner[l.prop](i); e.outer[l.prop](m) } }, zoomIn: function () { var j, i, l = e.current.dim, k = l.height - (e.current.padding * 2); e.innerSpace = k - e.inner.height(); e.outerSpace = k - e.outer.height(); if (e.current.openEffect === "elastic") { i = g.extend({}, l, e._getPosition(true)); delete i.position; j = this.getOrigPosition(); if (e.current.openOpacity) { j.opacity = 0; i.opacity = 1 } e.wrap.css(j).animate(i, { duration: e.current.openSpeed, easing: e.current.openEasing, step: this.step, complete: e._afterZoomIn }) } else { e.wrap.css(g.extend({}, e.current.dim, e._getPosition())); if (e.current.openEffect === "fade") { e.wrap.hide().fadeIn(e.current.openSpeed, e._afterZoomIn) } else { e._afterZoomIn() } } }, zoomOut: function () { var i, j = e.wrap.height() - (e.current.padding * 2); if (e.current.closeEffect === "elastic") { if (e.wrap.css("position") === "fixed") { e.wrap.css(e._getPosition(true)) } e.innerSpace = j - e.inner.height(); e.outerSpace = j - e.outer.height(); i = this.getOrigPosition(); if (e.current.closeOpacity) { i.opacity = 0 } e.wrap.animate(i, { duration: e.current.closeSpeed, easing: e.current.closeEasing, step: this.step, complete: e._afterZoomOut }) } else { e.wrap.fadeOut(e.current.closeEffect === "fade" ? e.current.Speed : 0, e._afterZoomOut) } }, changeIn: function () { var i; if (e.current.nextEffect === "elastic") { i = e._getPosition(true); i.opacity = 0; i.top = (parseInt(i.top, 10) - 200) + "px"; e.wrap.css(i).animate({ opacity: 1, top: "+=200px" }, { duration: e.current.nextSpeed, complete: e._afterZoomIn }) } else { e.wrap.css(e._getPosition()); if (e.current.nextEffect === "fade") { e.wrap.hide().fadeIn(e.current.nextSpeed, e._afterZoomIn) } else { e._afterZoomIn() } } }, changeOut: function () { function i() { g(this).trigger("onReset").remove() } e.wrap.removeClass("fancybox-opened"); if (e.current.prevEffect === "elastic") { e.wrap.animate({ opacity: 0, top: "+=200px" }, { duration: e.current.prevSpeed, complete: i }) } else { e.wrap.fadeOut(e.current.prevEffect === "fade" ? e.current.prevSpeed : 0, i) } } }; e.helpers.overlay = { overlay: null, update: function () { var k, i, j; this.overlay.width(0).height(0); if (g.browser.msie) { i = Math.max(d.documentElement.scrollWidth, d.body.scrollWidth); j = Math.max(d.documentElement.offsetWidth, d.body.offsetWidth); k = i < j ? c.width() : i } else { k = h.width() } this.overlay.width(k).height(h.height()) }, beforeShow: function (i) { if (this.overlay) { return } this.overlay = g('<div id="fancybox-overlay"></div>').css(i.css || { background: "black" }).appendTo("body"); if (i.closeClick) { this.overlay.bind("click.fb", e.close) } c.bind("resize.fb", g.proxy(this.update, this)); this.update(); this.overlay.fadeTo(i.speedIn || "fast", i.opacity || 1) }, onUpdate: function () { this.update() }, afterClose: function (i) { if (this.overlay) { this.overlay.fadeOut(i.speedOut || "fast", function () { g(this).remove() }) } this.overlay = null } }; e.helpers.title = { beforeShow: function (i) { var k, j = e.current.title || e.current.element.title || ""; if (j) { k = g('<div class="fancybox-title fancybox-title-' + i.type + '-wrap">' + j + "</div>").appendTo("body"); if (i.type === "float") { k.width(k.width()); k.wrapInner('<span class="child"></span>'); e.current.margin[2] += Math.abs(parseInt(k.css("margin-bottom"), 10)) } k.appendTo(i.type === "over" ? e.inner : (i.type === "outside" ? e.wrap : e.outer)) } } }; g.fn.fancybox = function (j) { var k = j || {}, i = this.selector || ""; function l(n) { var m = []; n.preventDefault(); if (this.rel && this.rel !== "" && this.rel !== "nofollow") { m = i.length ? g(i).filter('[rel="' + this.rel + '"]') : g('[rel="' + this.rel + '"]') } if (m.length) { k.index = m.index(this); e(m.get(), k) } else { e(this, k) } return false } if (i) { h.undelegate(i, "click.fb-start").delegate(i, "click.fb-start", l) } else { g(this).unbind("click.fb-start").bind("click.fb-start", l) } } }(window, document, jQuery)); (function (a) { a.fn.fancybox = function (b) { return this.click(function (c) { c.preventDefault(); b = b || {}; if (!a.fancybox) { return } if (!b.autoSize) { b.autoSize = false } if (!b.closeClick) { b.closeClick = false } a.fancybox.open(a(this), b) }) } })(jQuery); DESK = window.DESK || {};

(function(a) {
    a.autolink = function(c, e) {
        e = e || "_blank";
        c = c || "";
        var b = /\b([\w+.:-]+:\/\/)|mailto:/i, d = new RegExp("(\\b(?:([\\w+.:-]+:)//|www.|mailto:)(([\\w.\\-+]+(:\\w+)?@)?[-\\w]+(?:\\.[-\\w]+)*(?::\\d+)?(?:/(?:[~\\w\\+@%=\\(\\)-]|(?:[,.;:#'][^\\s$]))*)*(?:\\?[\\w\\+@%&-=.;:/-\\[\\]]+)?(?:\\#[\\w\\-]*)?)([[^$.*+?=!:|\\/()[]{}]]|<|$|))", "g");
        return c.replace(d, function(h) {
            var f = h, g = e;
            if (!b.test(h)) {
                f = "http://" + f;
            } else {
                if (/mailto:/i.test(h)) {
                    g = "_self";
                }
            }
            return a("<a/>", { target: g, href: f }).html(h).outerHTML();
        });
    };
    a.fn.highlight = function(d, c) {
        var b = d.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        return this.each(function() {
            var e = c || '<span class="highlight">$1</span>';
            a(this).html(a(this).html().replace(new RegExp("(" + b + '(?![\\w\\s?&.\\/;#~%"=-]*>))', "ig"), e));
        });
    };
    a.fn.autolink_old = function(b) {
        b = b || "_self";
        return this.each(function() {
            var c = /((http|https|ftp):\/\/[\w?=&.\/-;#~%-]+(?![\w\s?&.\/;#~%"=-]*>))/g;
            a(this).html(a(this).html().replace(c, '<a target="' + b + '" href="$1">$1</a> '));
        });
    };
    a.fn.mailto = function() {
        return this.each(function() {
            var b = /(([a-z0-9*._+]){1,}\@(([a-z0-9]+[-]?){1,}[a-z0-9]+\.){1,}([a-z]{2,4}|museum)(?![\w\s?&.\/;#~%"=-]*>))/g;
            a(this).html(a(this).html().replace(b, '<a href="mailto:$1">$1</a>'));
        });
    };
    a.fn.autolink = function(b) {
        return this.each(function() {
            var d = a(this), c = a.autolink(d.html(), b);
            d.html(c);
        });
    };
})(jQuery);